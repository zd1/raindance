for (site in 1:n.site) {
bc<-5;
for (ind in 1:n.ind) {
d.s<-array(as.integer(d[site,bc:(bc+slice.ind[ind]*4-1)]), c(4,slice.ind[ind])); # matrix. row for allele col for sample
ts<-apply(d.s, 1, sum, na.rm=T); # sum across rows to get total counts for each sample
ts<-ts/sum(ts); # allele frequency
o<-order(ts, decreasing=T); # get the order of the allele with highest count
as[ind, site, 1]<-o[1]; # index for concensus allele
if (ts[o[2]]>=snp.thresh) as[ind,site,2]<-o[2]; # index for elevated allele (allele with second highest count)
if (as[ind,site,2]==0) { # second highest allele frq is below snp.threshold, so it is hom
cat("\nSite ", site, "\t| Ind ", ind, " | Hom ", a.let[o[1]], "\t| NonConRead = ", signif(100*sum(ts[-o[1]]), 3),
"%", sep="");
ncr[site,ind]<-sum(ts[-o[1]]); # non conc allele count
} else {
cat("\nSite ", site, "\t| Ind ", ind, " | Het ", paste(a.let[o[1:2]], sep=""), "\t| NonConRead = ", signif(100*sum(ts[-o[1:2]]), 3),
"%", sep="");
ncr[site,ind]<-sum(ts[-o[1:2]]);
n.snps<-n.snps+1;
}
ct<-chisq.test(d.s);
within.chisq.p[site,ind]<-ct$p.value;
d.s.l[[ind]]<-d.s;
bc<-bc+slice.ind[ind]*4;
}
base.tots<-array(0, c(n.ind, 4)); # allele coverage for each individual
read.tots<-rep(0, n.ind); # total coverage for each individual
for (ind in 1:n.ind) {
base.tots[ind,]<-apply(d.s.l[[ind]], 1, sum, na.rm=T);
read.tots[ind]<-sum(d.s.l[[ind]]);
}
rt<-apply(base.tots, 1, sum); # coverage across ind
ct<-apply(base.tots, 2, sum); # coverage across allele
ex<-rt %*% t(ct) / sum(read.tots); # expected counts
lrt.bet.ind[site]<-sum(base.tots*(log(base.tots+1e-6)-log(ex+1e-6)));
for (ind in 1:n.ind) {
rt<-base.tots[ind,];
ct<-apply(d.s.l[[ind]], 2, sum, na.rm=T);
ex<-rt %*% t(ct) / read.tots[ind];
lrt.wit.ind[site,ind]<-sum(d.s.l[[ind]]*(log(d.s.l[[ind]]+1e-6)-log(ex+1e-6)));
}
}
setwd("/Users/zd1/cloud/code/raindance")
d<-read.table("raindance.kras.pik3ca.braf.tsv" , sep="\t", as.is=T, head=T, colClasses=c("numeric", "character", "numeric", "character", rep("numeric", 12*4),
"character", "character", rep("numeric", 4), rep("character", 26)));
ind<-rep(1:2, times=c(4*8, 4*4));
lib<-rep(1, 4*12);
n.site<-nrow(d);
n.ind<-2;
ind.list<-list();
slice.ind<-c(8,4);
ind.list[[1]]<-4:35;
ind.list[[2]]<-36:51;
as<-array(0, c(n.ind, n.site, 2));
a.let<-c("A", "C", "G", "T");
snp.thresh<-0.1;
ncr<-array(0, c(n.site, n.ind));
within.chisq.p<-array(0, c(n.site, n.ind));
n.snps<-0;
d.s.l<-list(length=n.ind);
lrt.bet.ind<-array(0, c(n.site, 1));
lrt.wit.ind<-array(0, c(n.site, n.ind));
for (site in 1:n.site) {
bc<-5;
for (ind in 1:n.ind) {
d.s<-array(as.integer(d[site,bc:(bc+slice.ind[ind]*4-1)]), c(4,slice.ind[ind])); # matrix. row for allele col for sample
ts<-apply(d.s, 1, sum, na.rm=T); # sum across rows to get total counts for each sample
ts<-ts/sum(ts); # allele frequency
o<-order(ts, decreasing=T); # get the order of the allele with highest count
as[ind, site, 1]<-o[1]; # index for concensus allele
if (ts[o[2]]>=snp.thresh) as[ind,site,2]<-o[2]; # index for elevated allele (allele with second highest count)
if (as[ind,site,2]==0) { # second highest allele frq is below snp.threshold, so it is hom
cat("\nSite ", site, "\t| Ind ", ind, " | Hom ", a.let[o[1]], "\t| NonConRead = ", signif(100*sum(ts[-o[1]]), 3),
"%", sep="");
ncr[site,ind]<-sum(ts[-o[1]]); # non conc allele count
} else {
cat("\nSite ", site, "\t| Ind ", ind, " | Het ", paste(a.let[o[1:2]], sep=""), "\t| NonConRead = ", signif(100*sum(ts[-o[1:2]]), 3),
"%", sep="");
ncr[site,ind]<-sum(ts[-o[1:2]]);
n.snps<-n.snps+1;
}
ct<-chisq.test(d.s);
within.chisq.p[site,ind]<-ct$p.value;
d.s.l[[ind]]<-d.s;
bc<-bc+slice.ind[ind]*4;
}
base.tots<-array(0, c(n.ind, 4)); # allele coverage for each individual
read.tots<-rep(0, n.ind); # total coverage for each individual
for (ind in 1:n.ind) {
base.tots[ind,]<-apply(d.s.l[[ind]], 1, sum, na.rm=T);
read.tots[ind]<-sum(d.s.l[[ind]]);
}
rt<-apply(base.tots, 1, sum); # coverage across ind
ct<-apply(base.tots, 2, sum); # coverage across allele
ex<-rt %*% t(ct) / sum(read.tots); # expected counts
lrt.bet.ind[site]<-sum(base.tots*(log(base.tots+1e-6)-log(ex+1e-6)));
for (ind in 1:n.ind) {
rt<-base.tots[ind,];
ct<-apply(d.s.l[[ind]], 2, sum, na.rm=T);
ex<-rt %*% t(ct) / read.tots[ind];
lrt.wit.ind[site,ind]<-sum(d.s.l[[ind]]*(log(d.s.l[[ind]]+1e-6)-log(ex+1e-6)));
}
}
View(d.s)
ds
d.s
chisq.test(d.s)
plot(100*ncr, log="xy", xlab="Non Consensus Reads (Ind1 %)", ylab="Non Consensus Reads (Ind2 %)", pch=19, col="blue");
abline(0,1,col="red");
cat("\nNo. SNPs = ", n.snps);
par(mfrow=c(1,n.ind+1));
qqplot(rchisq(10000, df=(n.ind-1)*3), 2*lrt.bet.ind, pch=19, col="blue", xlab="Expected", ylab="Observed", main="Between ind");
abline(0,1,col="red", lty="dotted");
for (ind in 1:n.ind) {
qqplot(rchisq(10000, df=(slice.ind[ind]-1)*3), 2*lrt.wit.ind[,ind], pch=19, col="blue", xlab="Expected", ylab="Observed",
main=paste("Within Ind", ind));
abline(0,1,col="red", lty="dotted");
}
p.val<-array(0, c(nrow(lrt.wit.ind), ncol(lrt.wit.ind)+1));
colnames(p.val)<-c("Within.1", "Within.2", "Between");
for (ind in 1:n.ind) {
p.val[,ind]<- -log10(pchisq(lrt.wit.ind[,ind], df=(slice.ind[ind]-1)*3, lower=F));
}
p.val[,3]<- -log10(pchisq(lrt.bet.ind, df=3*(n.ind-1), lower=F));
zz<-which(apply(p.val, 1, max)>=5)
par(mfrow=c(1,1));
par(mfrow=c(1,2));
for (ind in 1:n.ind) {
qqplot(-log10(runif(10000)), p.val[,ind], pch=19, col="blue", xlab="Expected", ylab="Observed",
main=paste("Within Ind", ind));
abline(0,1,col="red", lty="dotted");
}
par(mfrow=c(1,1));
plot(p.val[,1:2], xlab="P value Ind1", ylab="P value Ind2", pch=19, col="blue");
abline(0,1, col="red");
abline(h=6, lty="dotted");
abline(v=6, lty="dotted");
pval.thresh<-6;
wi<-which(apply(p.val[,1:2], 1, max)>pval.thresh);
op<-array(0, c(sum(p.val[,1:2]>pval.thresh), 13));
colnames(op)<-c("Site", "Ind", "-log10.pval", "LLK.b100", "LLK.b1", "LLK.b0.1",
"LLK.MN", "LLK.SPK", "NT.SPK", "N.Slice.SPK", "Phi.SPK", "LLK.Dirich100", "Fgt0.005");
ii.ct<-0;
bs<-c(100, 1, 0.1);
den<-function(x, lambda, beta) {
v1<-lambda*beta*log(beta)-lgamma(lambda*beta)-lfactorial(x)+lgamma(x+lambda*beta)-(x+lambda*beta)*log(1+beta);
return(v1);
}
spike.llk<-function(pars, rmj, cmj, rj) {
pi.all<-c(pars[1:3], 1-sum(pars[1:3]));
if (min(pi.all)<0 | max(pi.all)>1.0) return(1e6);
a1<-sum(rmj*log(pi.all), na.rm=T);
a2<-cmj*log(1-pars[4]);
a3<-rj*log((1-sum(pars[1:3])) *(1-pars[4])+pars[4]);
return(-(a1+a2+a3));
}
lgamma0<-function(val) {
wi<-which(val>1e-16);
ret<-rep(0, length(val));
ret[wi]<-lgamma(val[wi]);
return(ret);
}
for (site in wi) {
bc<-5;
for (ind in 1:n.ind) {
d.s<-array(as.integer(d[site,bc:(bc+slice.ind[ind]*4-1)]), c(4,slice.ind[ind]));
ts<-apply(d.s, 1, sum, na.rm=T);
ts<-ts/sum(ts);
o<-order(ts, decreasing=T);
as[ind, site, 1]<-o[1];
if (ts[o[2]]>=snp.thresh) as[ind,site,2]<-o[2];
if (as[ind,site,2]==0) {
cat("\nSite ", site, "\t| Ind ", ind, " | Hom ", a.let[o[1]], "\t| NonConRead = ", signif(100*sum(ts[-o[1]]), 3),
"%", sep="");
ncr[site,ind]<-sum(ts[-o[1]]);
} else {
cat("\nSite ", site, "\t| Ind ", ind, " | Het ", paste(a.let[o[1:2]], sep=""), "\t| NonConRead = ", signif(100*sum(ts[-o[1:2]]), 3),
"%", sep="");
ncr[site,ind]<-sum(ts[-o[1:2]]);
n.snps<-n.snps+1;
}
d.s.l[[ind]]<-d.s;
bc<-bc+slice.ind[ind]*4;
}
base.tots<-array(0, c(n.ind, 4));
read.tots<-rep(0, n.ind);
for (ind in 1:n.ind) {
base.tots[ind,]<-apply(d.s.l[[ind]], 1, sum, na.rm=T);
read.tots[ind]<-sum(d.s.l[[ind]]);
}
for (ind in 1:n.ind) if (p.val[site, ind]>pval.thresh) {
ii.ct<-ii.ct+1;
op[ii.ct,1:3]<-c(site, ind, p.val[site,ind]);
rt<-base.tots[ind,];
ct<-apply(d.s.l[[ind]], 2, sum, na.rm=T);
ex<-rt %*% t(ct) / read.tots[ind] + 1;
for (j in 1:3) {
ttmp<-den(d.s.l[[ind]]+1, ex, bs[j]);
op[ii.ct,3+j]<-sum(ttmp);
}
data<-d.s.l[[ind]];
rt<-apply(data, 1, sum);
ct<-apply(data, 2, sum);
pi.est<-rt/sum(rt);
vv<-100;
tmp<-data+pi.est*vv;
l.dirich<-ncol(data)*sum(lgamma0(vv*pi.est))-ncol(data)*lgamma0(vv)+sum(lgamma0(vv+ct))-sum(lgamma0(tmp));
op[ii.ct,12]<-l.dirich;
l.0<- -sum(rt*log(pi.est), na.rm=T);
op[ii.ct,7]<-l.0;
exd<- (rt/sum(rt)) %*% t(ct);
del<-(data-exd)/sqrt(exd);
oo<-order(del, decreasing=T);
nt.elev<-oo[1] %% 4;
if (nt.elev==0) nt.elev<-4;
slice.elev<-ceiling(oo[1]/4);
set2<-which(del[nt.elev,]>3);
slice.elev<-sort(union(slice.elev, set2));
rj<-sum(data[nt.elev, slice.elev]);
rmj<-rt;
rmj[nt.elev]<-rmj[nt.elev]-sum(data[nt.elev, slice.elev]);
rmj[c(4,nt.elev)]<-rmj[c(nt.elev, 4)]
cmj<-sum(ct[slice.elev]-data[nt.elev, slice.elev]);
pi.init<-pi.est;
pi.init[c(4,nt.elev)]<-pi.init[c(nt.elev, 4)]
opp<-optim(par=c(pi.init[1:3], 0.01), fn=spike.llk, rmj=rmj, cmj=cmj, rj=rj);
l.1<-spike.llk(opp$par, rmj=rmj, cmj=cmj, rj=rj);
op[ii.ct,8]<-l.1;
op[ii.ct,9]<-nt.elev;
op[ii.ct,10]<-length(slice.elev);
op[ii.ct,11]<-opp$par[4];
}
fs<-t(data)/ct;
op[ii.ct,13]<-(sum(fs>0.005)-ncol(data))/prod(dim(data));
}
plot(op[,7]-op[,12], op[,7]-op[,8], pch=19, col="blue", xlab="LLK gain noisy model", ylab="LLK gain spike model");
ww<-which(op[,13]>0.1);
points(op[ww,7]-op[ww,12], op[ww,7]-op[ww,8], pch=19, col="green");
abline(0,1, col="red");
abline(11.5,1, lty="dotted", col="red");
op
head(data)
data[:10,:10]
data[1:10,1:10]
)
head(data)
data[1,]
lib
head(samples)
head(seqsamplelist)
head(seqsamplelist)
head(samples)
head(allsamples)
head(seqsamplelist)
head(allsamples)
head(allsamples)
n.site
colnames(data)
colnames(data)[,seq(1,ncol(data),4)]
ncol(data)
seq(1,ncol(data),by=4)
data[,seq(1,ncol(data),by=4)]
colnames(data)[seq(1,ncol(data),by=4)]]
colnames(data)[seq(1,ncol(data),by=4)]
head(allsamples)
lib
ind
data[1,]
array(as.integer(data[1,]), c(4, 288))
head(data)
data[, 5:ncols(data)]
data[, 5:ncol(data)]
data[1, 5:ncol(data)]
n.sample
dim(allsamples)
n.sample
lib
ind
unique(ind)
data.site
ts
o
ts
ts
fs
ts
fs
o
o
n.ind
lib
n.ind
ind
which(ind = 14)
which(ind == 14)
ind
which(indcol==14)
len(ind)
length(ind)
ind
length(indcol)
indcol
colidx
i
colidx
sub
ds
d.s
o
ind
d.s
o
o[1,]
mean(o[1,])
int(mean(o[1,]))
floor(mean(o[1,]))
o[1,3]
ds[o[1,3]]
o
o[1,2]
o[1,3]
o[1,4]
d.s
c
d.s
d.s
ind
o
o
o[,1]
o[1,]
table
table(o[1,])
table(o[1,])[1]
table(o[1,])[1]==29
table(o[1,])[2]
fs
fs
fs[conidx,]
conidx
fs
d.s
fs[conidx,]
mean(fs[conidx,])
o
o[2,]
o
o[1,]
o[2,]
mean(o[2,])
floor(mean(o[2,]))
fs[floor(mean(o[2,])), ]
mean(fs[floor(mean(o[2,])), ])
o[2,]
o[1,]
o[2,]
ind
ts
d.s
d.s[-conidx, ]
average(d.s[-conidx, ])
mean(d.s[-conidx, ])
apply((d.s[-conidx, ]),2,sum)
mean(apply((d.s[-conidx, ]),2,sum))
f.s
fs
fs[-conidx,]
apply(fs[-conidx,],2,sum)
signif(100*apply(fs[-conidx,],2,sum), 3)
mean(apply(fs[-conidx,],2,sum))
apply(fs[-conidx,],2,sum)
o
o[1:2,]
fs[o[1:2,],]
fs
o
o[,1]
fs[o[1,],]
fs
l.highest
ind
indcol
ind[ii]
ii <- 1
ind[ii]
o
o
o
colidx
indcol
ind
o
ds
d.s
l.highest
o
o[1]
o[1,]
mean(o[1,])
round(o[1,])
round(mean(o[1,]))
f.s
fs
fs[c(1,2,4),]
apply(fs[c(1,2,4),],2,sum)
mean(apply(fs[c(1,2,4),],2,sum))
l.highest
fs
fs[-l.highest,]
apply(fs[-l.highest,],2,sum)
mean(apply(fs[-l.highest,],2,sum))
100*mean(apply(fs[-l.highest,],2,sum))
count.consen
signif(100*mean(apply(fs[-l.highest,],2,sum)),3)
signif(100*mean(apply(fs[-l.highest,],2,sum), 3))
mean(apply(fs[-l.highest,],2,sum)
)
signif(100*mean(apply(fs[-l.highest,],2,sum), 3))
n.ind
n.ind
1:5
ind[2]
ind
ncr
n.shps
n.snps
d.s
chisq.test(d.s)
d.s
chisq.test(d.s)
within.chisq.p
base.tots
lrt.wit.ind
lrt.bet.ind
n.ind
n.ind
1:n.ind
o
thisind
indcol
thisind
ind
ncr
head(ncr)
allind
pairs(ncr)
rchisq
block.ind
ind
allind
indcol
table <- indcol
table(indcol)
block.ind[[3]]
block.ind[[14]]
block.ind$14
block.ind['3']
block.ind['14']
i <-  14
block.ind[i]
block.ind[as.character(i)]
dev.off()
(block.ind[as.character(ind)]-1)*3)
block.ind[as.character(ind)]-1)*3
block.ind[as.character(ind)]
block.ind
ind
allind[ind]
head(p.val)
head(lrt.wit.ind)
head(lrt.bet.ind)
allind
paste("Within",allind, )
paste("Within",allind)
paste("Ind",allind)
paste("Ind",allind, sep="")
p.val
head(p.val)
allind
head(p.val)
head(p.val)
zz
n.ind
allind
q()
n
